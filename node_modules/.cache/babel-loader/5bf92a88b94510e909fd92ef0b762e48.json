{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Desktop/practice project/src/pages/AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport { useEffect } from 'react'; // importing the useEffect hook from react\n\nimport LoadingSpinner from '../components/UI/LoadingSpinner'; // importing the LoadingSpinner\n// component from the UI folder\n\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 'q1',\n  author: 'Kartik',\n  text: 'Travelling around the would should be your major goal.'\n}, {\n  id: 'q2',\n  author: 'Radhika',\n  text: 'I am into adventure sports.'\n}, {\n  id: 'q3',\n  author: 'Akshat',\n  text: 'You should play on probabilities even if it wastes your time.'\n}, {\n  id: 'q4',\n  author: 'Ayushi',\n  text: 'Mujhse nhi ho payega ye sab, ho gya toh bhi I will ruin everything!'\n}, {\n  id: 'q5',\n  author: 'Priyal',\n  text: 'Pagal hai utkarsh, I know he wont text me saamne se!'\n}];\n\nconst AllQuotes = props => {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    // using the useEffect hook\n    sendRequest();\n  }, [sendRequest]); // so now we will run the sendRequest function whenever this component\n  // renders\n\n  if (status === 'pending') {\n    // checking if the status is pending, and then rendering \n    // the loading spinner if it is pending\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_QUOTES\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AllQuotes, \"Sn2QGCbJGjm/GjrACrT5qb4lH3A=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\nexport default AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"names":["QuoteList","useEffect","LoadingSpinner","useHttp","getAllQuotes","DUMMY_QUOTES","id","author","text","AllQuotes","props","sendRequest","status","data","loadedQuotes","error"],"sources":["/Users/kartik/Desktop/practice project/src/pages/AllQuotes.js"],"sourcesContent":["import QuoteList from \"../components/quotes/QuoteList\"; \n\nimport { useEffect } from 'react'; // importing the useEffect hook from react\nimport LoadingSpinner from '../components/UI/LoadingSpinner'; // importing the LoadingSpinner\n// component from the UI folder\n\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api'; \n\nconst DUMMY_QUOTES = [\n    {\n        id: 'q1',\n        author: 'Kartik',\n        text: 'Travelling around the would should be your major goal.'\n    },\n    {\n        id: 'q2',\n        author: 'Radhika',\n        text: 'I am into adventure sports.'\n    },\n    {\n        id: 'q3',\n        author: 'Akshat',\n        text: 'You should play on probabilities even if it wastes your time.'\n    },\n    {\n        id: 'q4',\n        author: 'Ayushi',\n        text: 'Mujhse nhi ho payega ye sab, ho gya toh bhi I will ruin everything!'\n    },\n    {\n        id: 'q5',\n        author: 'Priyal',\n        text: 'Pagal hai utkarsh, I know he wont text me saamne se!'\n    }\n];\n\nconst AllQuotes = (props) => {\n\n    const {sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\n\n    useEffect(() => { // using the useEffect hook\n        sendRequest(); \n    }, [sendRequest]); // so now we will run the sendRequest function whenever this component\n    // renders\n\n    if(status === 'pending'){ // checking if the status is pending, and then rendering \n        // the loading spinner if it is pending\n        return <div className=\"centered\">\n            <LoadingSpinner />\n        </div>\n    }\n\n    return (   \n        <QuoteList quotes={DUMMY_QUOTES}/>\n    );\n};\n\nexport default AllQuotes;"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,gCAAtB;AAEA,SAASC,SAAT,QAA0B,OAA1B,C,CAAmC;;AACnC,OAAOC,cAAP,MAA2B,iCAA3B,C,CAA8D;AAC9D;;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;;AAEA,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,IADR;EAEIC,MAAM,EAAE,QAFZ;EAGIC,IAAI,EAAE;AAHV,CADiB,EAMjB;EACIF,EAAE,EAAE,IADR;EAEIC,MAAM,EAAE,SAFZ;EAGIC,IAAI,EAAE;AAHV,CANiB,EAWjB;EACIF,EAAE,EAAE,IADR;EAEIC,MAAM,EAAE,QAFZ;EAGIC,IAAI,EAAE;AAHV,CAXiB,EAgBjB;EACIF,EAAE,EAAE,IADR;EAEIC,MAAM,EAAE,QAFZ;EAGIC,IAAI,EAAE;AAHV,CAhBiB,EAqBjB;EACIF,EAAE,EAAE,IADR;EAEIC,MAAM,EAAE,QAFZ;EAGIC,IAAI,EAAE;AAHV,CArBiB,CAArB;;AA4BA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAEzB,MAAM;IAACC,WAAD;IAAcC,MAAd;IAAsBC,IAAI,EAAEC,YAA5B;IAA0CC;EAA1C,IAAmDZ,OAAO,CAACC,YAAD,EAAe,IAAf,CAAhE;EAEAH,SAAS,CAAC,MAAM;IAAE;IACdU,WAAW;EACd,CAFQ,EAEN,CAACA,WAAD,CAFM,CAAT,CAJyB,CAMN;EACnB;;EAEA,IAAGC,MAAM,KAAK,SAAd,EAAwB;IAAE;IACtB;IACA,oBAAO;MAAK,SAAS,EAAC,UAAf;MAAA,uBACH,QAAC,cAAD;QAAA;QAAA;QAAA;MAAA;IADG;MAAA;MAAA;MAAA;IAAA,QAAP;EAGH;;EAED,oBACI,QAAC,SAAD;IAAW,MAAM,EAAEP;EAAnB;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH,CAnBD;;GAAMI,S;UAEuDN,O;;;KAFvDM,S;AAqBN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}