{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Desktop/practice project/src/components/quotes/QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'; //importing useLocation hook \n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation(); // defining useLocation hook \n\n  const queryParams = new URLSearchParams(location.search); // using this inbuilt class in\n  // react-router-dom library to create an object instance of that class so that we can \n  // create an object of type where the object members are of key-value pair type\n  // for example, if the query string is '?sort=asc' then queryParams will be an object\n  // of type { sort = 'asc' };\n\n  const isSortingAscending = queryParams.get('sort') === 'asc'; // using the get method to\n  // access the sort key of the queryParams object then we are checking whether that value\n  // is equal to 'asc' or not and storing the result of this operation in isSortingAscending\n\n  const changeSortingHandler = () => {\n    history.push('/quotes?sort=' + (isSortingAscending ? 'desc' : 'asc')); // pushing \n    // the value in the query string according to the value opposite of what was already \n    // present in the query string, for example, if the button was Sort Ascending and you \n    // clicked on the button then the button becomes 'Sort Descending' and now the\n    // query string becomes '?sort=asc' and vice versa. \n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isSortingAscending ? 'Descending' : 'Ascending']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: props.quotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"names":["Fragment","useHistory","useLocation","QuoteItem","classes","QuoteList","props","history","location","queryParams","URLSearchParams","search","isSortingAscending","get","changeSortingHandler","push","sorting","list","quotes","map","quote","id","author","text"],"sources":["/Users/kartik/Desktop/practice project/src/components/quotes/QuoteList.js"],"sourcesContent":["import { Fragment } from 'react';\nimport { useHistory, useLocation  } from 'react-router-dom'; //importing useLocation hook \n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n  const location = useLocation(); // defining useLocation hook \n\n  const queryParams =  new URLSearchParams(location.search); // using this inbuilt class in\n  // react-router-dom library to create an object instance of that class so that we can \n  // create an object of type where the object members are of key-value pair type\n  // for example, if the query string is '?sort=asc' then queryParams will be an object\n  // of type { sort = 'asc' };\n\n  const isSortingAscending = queryParams.get('sort') === 'asc'; // using the get method to\n  // access the sort key of the queryParams object then we are checking whether that value\n  // is equal to 'asc' or not and storing the result of this operation in isSortingAscending\n\n  const changeSortingHandler = () => { \n    history.push('/quotes?sort=' + (isSortingAscending ? 'desc' : 'asc')); // pushing \n    // the value in the query string according to the value opposite of what was already \n    // present in the query string, for example, if the button was Sort Ascending and you \n    // clicked on the button then the button becomes 'Sort Descending' and now the\n    // query string becomes '?sort=asc' and vice versa. \n\n  };\n\n  return (\n    <Fragment>\n\n      <div className={classes.sorting}>\n\n        {/* checking if the sorting variable is of type Ascending or Descending and then \n        assigning that value to the string in this button */}\n        <button onClick={changeSortingHandler}>\n          Sort { isSortingAscending ? 'Descending' : 'Ascending'} \n        </button>\n\n      </div>\n\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAyC,kBAAzC,C,CAA6D;;AAE7D,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAE3B,MAAMC,OAAO,GAAGN,UAAU,EAA1B;EACA,MAAMO,QAAQ,GAAGN,WAAW,EAA5B,CAH2B,CAGK;;EAEhC,MAAMO,WAAW,GAAI,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAArB,CAL2B,CAKgC;EAC3D;EACA;EACA;EACA;;EAEA,MAAMC,kBAAkB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA4B,KAAvD,CAX2B,CAWmC;EAC9D;EACA;;EAEA,MAAMC,oBAAoB,GAAG,MAAM;IACjCP,OAAO,CAACQ,IAAR,CAAa,mBAAmBH,kBAAkB,GAAG,MAAH,GAAY,KAAjD,CAAb,EADiC,CACsC;IACvE;IACA;IACA;IACA;EAED,CAPD;;EASA,oBACE,QAAC,QAAD;IAAA,wBAEE;MAAK,SAAS,EAAER,OAAO,CAACY,OAAxB;MAAA,uBAIE;QAAQ,OAAO,EAAEF,oBAAjB;QAAA,oBACSF,kBAAkB,GAAG,YAAH,GAAkB,WAD7C;MAAA;QAAA;QAAA;QAAA;MAAA;IAJF;MAAA;MAAA;MAAA;IAAA,QAFF,eAYE;MAAI,SAAS,EAAER,OAAO,CAACa,IAAvB;MAAA,UACGX,KAAK,CAACY,MAAN,CAAaC,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;QAEE,EAAE,EAAEA,KAAK,CAACC,EAFZ;QAGE,MAAM,EAAED,KAAK,CAACE,MAHhB;QAIE,IAAI,EAAEF,KAAK,CAACG;MAJd,GACOH,KAAK,CAACC,EADb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CAjDD;;GAAMhB,S;UAEYJ,U,EACCC,W;;;KAHbG,S;AAmDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}