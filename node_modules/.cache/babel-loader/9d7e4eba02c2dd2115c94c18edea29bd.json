{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Desktop/practice project/src/pages/NewQuote.js\",\n    _s = $RefreshSig$();\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport { addQuote } from '../lib/api'; // importing the addQuote function from api.js file\n\nimport useHttp from '../hooks/use-http'; // importing the use-http custom hook\n\nimport { useEffect } from 'react'; // we need to import the useEffect hook so that we can \n// run the side effects only when a given dependency changes \n\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewQuote = props => {\n  _s();\n\n  const {\n    sendRequest,\n    status\n  } = useHttp(addQuote); // extracting the sendRequest function\n  // and the status object from the object that is returned by useHttp custom hook\n\n  const history = useHistory();\n  useEffect(() => {\n    // defining the useEffect hook here\n    if (status === 'completed') {\n      history.push('/quotes'); // redirecting the user to '/quotes' once the status\n      // becomes 'completed'. You can see when the status becomes 'completed' in\n      // use-http.js file\n    }\n  }, [status, history]); // remember to put all the variables that you are using in the \n  // callback function of useEffect as dependencies in the array\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData); // passing the quoteData object into our sendRequest function\n    // that is defined inside the use-https custom hook\n  };\n\n  return (\n    /*#__PURE__*/\n    // adding the isLoading prop to the QuoteForm component because there in the\n    // QuoteForm component we are rendering a loading spinner based on whether isLoading\n    // is true or false.\n    _jsxDEV(QuoteForm, {\n      isLoading: status === 'pending',\n      onAddQuote: addQuoteHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(NewQuote, \"snO8YbiVx4pvi6AI7RwJR1+Nuco=\", false, function () {\n  return [useHttp, useHistory];\n});\n\n_c = NewQuote;\nexport default NewQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewQuote\");","map":{"version":3,"names":["QuoteForm","addQuote","useHttp","useEffect","useHistory","NewQuote","props","sendRequest","status","history","push","addQuoteHandler","quoteData"],"sources":["/Users/kartik/Desktop/practice project/src/pages/NewQuote.js"],"sourcesContent":["import QuoteForm from '../components/quotes/QuoteForm';  \nimport { addQuote } from '../lib/api'; // importing the addQuote function from api.js file\nimport useHttp from '../hooks/use-http'; // importing the use-http custom hook\nimport {useEffect} from 'react'; // we need to import the useEffect hook so that we can \n// run the side effects only when a given dependency changes \n\nimport { useHistory } from 'react-router-dom';\n\nconst NewQuote = (props) => {\n\n    const {sendRequest, status} = useHttp(addQuote); // extracting the sendRequest function\n    // and the status object from the object that is returned by useHttp custom hook\n\n    const history = useHistory();\n\n    useEffect(() => { // defining the useEffect hook here\n        if(status === 'completed'){\n            history.push('/quotes'); // redirecting the user to '/quotes' once the status\n            // becomes 'completed'. You can see when the status becomes 'completed' in\n            // use-http.js file\n        }\n    }, [status, history]); // remember to put all the variables that you are using in the \n    // callback function of useEffect as dependencies in the array\n\n    const addQuoteHandler = (quoteData) => { \n        sendRequest(quoteData); // passing the quoteData object into our sendRequest function\n        // that is defined inside the use-https custom hook\n    };\n\n    return(\n        // adding the isLoading prop to the QuoteForm component because there in the\n        // QuoteForm component we are rendering a loading spinner based on whether isLoading\n        // is true or false.\n        <QuoteForm isLoading= {status === 'pending'} onAddQuote={addQuoteHandler}/>\n    );\n};\n\nexport default NewQuote;"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,gCAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAAuC;;AACvC,OAAOC,OAAP,MAAoB,mBAApB,C,CAAyC;;AACzC,SAAQC,SAAR,QAAwB,OAAxB,C,CAAiC;AACjC;;AAEA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAExB,MAAM;IAACC,WAAD;IAAcC;EAAd,IAAwBN,OAAO,CAACD,QAAD,CAArC,CAFwB,CAEyB;EACjD;;EAEA,MAAMQ,OAAO,GAAGL,UAAU,EAA1B;EAEAD,SAAS,CAAC,MAAM;IAAE;IACd,IAAGK,MAAM,KAAK,WAAd,EAA0B;MACtBC,OAAO,CAACC,IAAR,CAAa,SAAb,EADsB,CACG;MACzB;MACA;IACH;EACJ,CANQ,EAMN,CAACF,MAAD,EAASC,OAAT,CANM,CAAT,CAPwB,CAaD;EACvB;;EAEA,MAAME,eAAe,GAAIC,SAAD,IAAe;IACnCL,WAAW,CAACK,SAAD,CAAX,CADmC,CACX;IACxB;EACH,CAHD;;EAKA;IAAA;IACI;IACA;IACA;IACA,QAAC,SAAD;MAAW,SAAS,EAAGJ,MAAM,KAAK,SAAlC;MAA6C,UAAU,EAAEG;IAAzD;MAAA;MAAA;MAAA;IAAA;EAJJ;AAMH,CA3BD;;GAAMN,Q;UAE4BH,O,EAGdE,U;;;KALdC,Q;AA6BN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}